# empty for now
if test_is_a_file and (test_dir == "../riscv-tests/isa/rv32ui"):
    if verbosity >0:
        print("-I- From override.py : test {} is a file".format(test))
        print("-I- From override.py : test_name {} ".format(test_name))
        print("-I- From override.py : test_dir <{}> ".format(test_dir))
    cfg['c_compiler']['extra_c_sources'] = "$(TEST_DIR)/" + test_name + ".S"
    cfg['c_compiler']['extra_incdirs'] = " -I$(TOP)/common/include "
    cfg['c_compiler']['extra_defines'] = " -DTEST_FUNC_NAME={} ".format(test_name)
    cfg['c_compiler']['extra_defines'] += " -DTEST_FUNC_RET={}_ret ".format(test_name)
    cfg['c_compiler']['extra_defines'] += " -DTEST_FUNC_TXT='\"{}\"' ".format(test_name)
    # We override the warnings
    cfg['c_compiler']['warnings'] = "-Werror -Wall "

# Opus codec on Nanorv32
if test == "../../opus":
    print("-I- Special setup for the opus codec")
    cfg['c_compiler']['extra_c_sources'] = "$(TEST_DIR)/" + "nanorv32/main.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "nanorv32/retarget.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/"  + "src/opus.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "src/opus_decoder.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "src/opus_encoder.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "src/opus_multistream.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "src/opus_multistream_decoder.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "src/opus_multistream_encoder.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "src/repacketizer.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "src/mlp.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "src/mlp_data.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "celt/bands.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "celt/celt.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "celt/celt_decoder.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "celt/celt_encoder.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "celt/celt_lpc.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "celt/cwrs.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "celt/entcode.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "celt/entdec.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "celt/entenc.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "celt/kiss_fft.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "celt/laplace.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "celt/mathops.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "celt/mdct.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "celt/modes.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "celt/pitch.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "celt/quant_bands.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "celt/rate.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "celt/vq.c "
    #cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "celt/arm/arm_celt_map.c "
    #cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "celt/arm/armcpu.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/A2NLSF.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/ana_filt_bank_1.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/biquad_alt.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/bwexpander.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/bwexpander_32.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/check_control_input.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/CNG.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/code_signs.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/control_audio_bandwidth.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/control_codec.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/control_SNR.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/debug.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/dec_API.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/decode_core.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/decode_frame.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/decode_indices.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/decode_parameters.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/decode_pitch.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/decode_pulses.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/decoder_set_fs.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/enc_API.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/encode_indices.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/encode_pulses.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/gain_quant.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/HP_variable_cutoff.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/init_decoder.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/init_encoder.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/inner_prod_aligned.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/interpolate.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/lin2log.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/log2lin.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/LP_variable_cutoff.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/LPC_analysis_filter.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/LPC_inv_pred_gain.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/NLSF_decode.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/NLSF_del_dec_quant.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/NLSF_encode.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/NLSF_stabilize.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/NLSF_unpack.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/NLSF_VQ.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/NLSF_VQ_weights_laroia.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/NLSF2A.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/NSQ.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/NSQ_del_dec.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/pitch_est_tables.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/PLC.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/process_NLSFs.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/quant_LTP_gains.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/resampler.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/resampler_down2.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/resampler_down2_3.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/resampler_private_AR2.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/resampler_private_down_FIR.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/resampler_private_IIR_FIR.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/resampler_private_up2_HQ.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/resampler_rom.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/shell_coder.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/sigm_Q15.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/sort.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/stereo_decode_pred.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/stereo_encode_pred.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/stereo_find_predictor.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/stereo_LR_to_MS.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/stereo_MS_to_LR.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/stereo_quant_pred.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/sum_sqr_shift.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/table_LSF_cos.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/tables_gain.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/tables_LTP.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/tables_NLSF_CB_NB_MB.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/tables_NLSF_CB_WB.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/tables_other.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/tables_pitch_lag.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/tables_pulses_per_block.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/VAD.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/VQ_WMat_EC.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/apply_sine_window_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/autocorr_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/burg_modified_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/corrMatrix_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/encode_frame_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/find_LPC_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/find_LTP_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/find_pitch_lags_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/find_pred_coefs_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/k2a_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/k2a_Q16_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/LTP_analysis_filter_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/LTP_scale_ctrl_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/noise_shape_analysis_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/pitch_analysis_core_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/prefilter_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/process_gains_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/regularize_correlations_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/residual_energy_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/residual_energy16_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/schur_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/schur64_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/solve_LS_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/vector_ops_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += "$(TEST_DIR)/" + "silk/fixed/warped_autocorrelation_FIX.c "
    cfg['c_compiler']['extra_c_sources'] += '$(TOP)/common/clib/printf-stdarg.c '
    cfg['c_compiler']['extra_c_sources'] += '$(TOP)/common/clib/memcpy.c '
    cfg['c_compiler']['extra_c_sources'] += '$(TOP)/common/clib/memmove.c '
    cfg['c_compiler']['extra_c_sources'] += '$(TOP)/common/clib/memset.S '






    cfg['c_compiler']['extra_incdirs'] = ' -I$(TOP)/common/clib '
    cfg['c_compiler']['extra_incdirs'] += " -I$(TEST_DIR)/include  "
    cfg['c_compiler']['extra_incdirs'] += " -I$(TEST_DIR)/celt "
    cfg['c_compiler']['extra_incdirs'] += " -I$(TEST_DIR)/silk "
    cfg['c_compiler']['extra_incdirs'] += " -I$(TEST_DIR)/silk/fixed "

    cfg['c_compiler']['extra_defines'] = " -DVAR_ARRAYS -DOPUS_BUILD -DFIXED_POINT -DDISABLE_FLOAT_API  -DENABLE_SWO"
    if target_fpga:
        cfg['c_compiler']['extra_c_sources'] += ' $(TOP)/common/clib/uart.c '
        cfg['c_compiler']['extra_defines'] = ' -DUART_PUTCHAR=putchar_uart0 '

    cfg['c_compiler']['default_lib_opt'] = " -Wl,--gc-sections "
    cfg['c_compiler']['optimisation_options'] = '-O3 -fdata-sections -ffunction-sections'
    cfg['c_compiler']['linker_script'] = '$(LINKER_SCRIPT_PATH)/nanorv32_rom_sram_256k.ld'
